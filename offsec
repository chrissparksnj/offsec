#!/usr/bin/env python
import sqlite3
import argparse
import socket
import subprocess
import sys
import pprint
import inspect
import os
from terminaltables import AsciiTable
from colorama import Fore, Back, Style, init
init(autoreset=True)
'''
pks
nmap
enum
smtp
lists
ssl
rpc
ssh
sql
ftp
nfs
dns
smb
'''

def red(string):
    return Style.BRIGHT + Fore.RED + string.upper() + Fore.RESET + Style.RESET_ALL

platform = sys.platform
if platform == "win32":
    import colorama
    colorama.init()

def remove_color(string):
    b = string[5:-4]
    return b

def colorize_tuple(t):
    lst = list(t)
    lst[1] = clr.OKGREEN + lst[1] + clr.ENDC 
    return tuple(lst)

def get_all_modules(fit=False):
    curdir = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(curdir + '/offsec.db')
    cur = conn.cursor()
    if fit:
        cur.execute("SELECT id, command, description from commands")
        rows = [(red("id"), red("command"), red("description"))]
    else:
        cur.execute("SELECT topic, command, description FROM commands")
        rows = [(red("topic"), red("command"), red("description"))]
    results = cur.fetchall()
    for tup in results:
        rows.append(tup)
    make_table(rows, "all")

def getports():
    curdir = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(curdir + '/offsec.db')
    cur = conn.cursor()
    cur.execute("SELECT portnumber, servicename, servicedescription FROM ports ORDER BY portnumber")
    rows = [(red("number"), red("name"), red("description"))]
    results = cur.fetchall()
    for tup in results:
        rows.append(tup)
    make_table(rows, "ports")


def get_module(mod):
    curdir = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(curdir + '/offsec.db')
    cur = conn.cursor()
    cur.execute("SELECT topic, command, description FROM commands WHERE mod_name = ?", (mod,))
    rows = [(red("topic"), red("command"), red("description"))]
    results = cur.fetchall()
    for tup in results:
        rows.append(tup)
    make_table(rows, mod)



def make_table(data, title=None, inner=None):
    '''termtables takes list of lists, or list of tuples'''
    data_array = data
    table = AsciiTable(data_array, title=title)
    if inner:
        table.inner_row_border = True
    print table.table


def useful_packages():
    get_module("pks")

def usefulmethods():
    make_table(txt.methods, "Methodology", "True")

def nmap():
    get_module("nmap")

def dns():
    get_module("dns_ha")

def smb():
    get_module("smb")

def fast_lists():
    get_module("lists")

def enum():
    get_module("enum")

def ssh():
    get_module("ssh")

def ftp():
    get_module("ftp")

def ssl():
    get_module("ssl")

def smtp():
    get_module("smtp_ha")

def nfs():
    get_module("nfs")

def web_app():
    get_module("web_apps")

def sql():
    get_module("sql")

def rpc():
    get_module("rpc")

def shellshock():
    get_module("shellshock")

def rdp():
    get_module("rdp")

def install():
    get_module("install")

def linux_network():
    get_module("linux_network")

def ig():
    get_module("ig")

def all_commands():
    get_all_modules(fit=True)


parser = argparse.ArgumentParser(description="Commands from guide.offsecnewbie.com tutorial")
parser.add_argument("-in", "--install", action="store_true", dest="helpcommands", default=False, help="shows install scripts")
parser.add_argument("-ig", "--intel-gathering", action="store_true", dest="ig", default=False, help="intel gathering commands")
parser.add_argument("-dn", "--dns", action="store_true", dest="dns", default=False, help="dns commands")
parser.add_argument("-sm", "--smtp", action="store_true", dest="smtp", default=False, help="smtp commands")
parser.add_argument("-p", "--ports", action="store_true", dest="ports", default=False, help="ports and services info")

#parser.add_argument('-ss', '--shellshock', action='store_true', dest="shellshock", default=False, help="show shell shock scripts")
#parser.add_argument('-pk', '--packages', action='store_true', dest='git_packages', default=False,help='show interesting packages and their install instructions')
#parser.add_argument('-wa', '--web-app', action='store_true', dest='web_app', default=False, help="show web-app commands")
#parser.add_argument('-sq', '--sql', action='store_true', dest='sql', default=False, help="show web-app commands")
#parser.add_argument('-rp', '--rpc', action='store_true', dest='rpc', default=False, help="show rpc commands")
#parser.add_argument('-nm', '--nmap', action='store_true', dest='nmap', default=False, help="show nmap commands")
#parser.add_argument('-dn', '--dns', action='store_true', dest='dns', default=False, help="shows all dns commands")
#parser.add_argument('-sb', '--smb', action='store_true', dest='smb', default=False, help="shows all smb commands")
#parser.add_argument('-en', '--enum', action='store_true', dest='enum', default=False, help="shows all smb commands")
#parser.add_argument('-sh', '--ssh', action='store_true', dest='ssh', default=False, help="shows all ssh commands")
#parser.add_argument('-ft', '--ftp', action='store_true', dest='ftp', default=False, help="shows all ftp commands")
#parser.add_argument('-sl', '--ssl', action='store_true', dest='ssl', default=False, help="shows all ssl commands")
#parser.add_argument('-sm', "--smtp", action='store_true', dest='smtp', default=False, help="shows all smtp commands")
#parser.add_argument('-nf', '--nfs', action='store_true', dest="nfs", default=False, help="show all nfs commands")
#parser.add_argument('-a', "--all", action='store_true', dest='all_commands', default=False, help="shows all smtp commands")
#parser.add_argument('-gm', '--get-modules', action='store_true', dest='get_methods', default=False, help="shows methodology offered within the tutorial")
#parser.add_argument('-ul', '--useful-links', action="store_true", dest="get_links", default=False, help="shows useful link")
#parser.add_argument('-it', action='store_true', dest='install_template', default=False, help="install a standardized template to your home directory")
#parser.add_argument('-fl', '--fast-lists', action='store_true', dest='fast_list', default=False, help="get lists that are usefule, fast!")
#parser.add_argument('-rd', '--rdp', action='store_true', dest='rdp', default=False, help='RDP Commands')
#parser.add_argument('-ln', '--linux_network', action='store_true', dest='linux_network', default=False, help="Linux network commands")
#parser.add_argument('--crt-search', action='store_true', dest='crtsh', default=False, help="use crt.sh to find subdomains")
#parser.add_argument("--flush-db", action='store_true', dest='flush_db', default=False, help="flush the recon-ng database")
#parser.add_argument("--raw-ip", action='store_true', dest='getrawips', default=False, help="get raw ip addresses of subdomains")
#parser.add_argument('--domain', action='store', dest='domain', help='the target domain')
parser.add_argument('--version', action='version', version='%(prog)s 1.0')

results = parser.parse_args()
""" if results.linux_network:
    linux_network() """
if results.helpcommands:
    install()
if results.dns:
    dns()
if results.ig:
    ig()
if results.smtp:
    smtp()
if results.ports:
    getports()
""" if results.rdp:
    rdp()
if results.shellshock:
    shellshock()
if results.fast_list:
    fast_lists()
if results.git_packages:
    useful_packages()
if results.rpc:
    rpc()
if results.sql:
    sql()
if results.web_app:
    web_app()
if results.nmap:
    nmap()
if results.dns:
    dns()
if results.smb:
    smb()
if results.enum:
    enum()
if results.ssh:
    ssh()
if results.ftp:
    ftp()
if results.ssl:
    ssl()
if results.smtp:
    smtp()
if results.nfs:
    nfs()
if results.all_commands:
    all_commands()
if results.get_methods:
    usefulmethods()
if results.get_links:
    usefullinks()
if results.flush_db:
    flush_recon_db()
if results.getrawips:
    get_subdomain_ip(results.domain)
if results.install_template:
    url = 'https://411hall.github.io/assets/files/CTF_template.ctb'
    wget_check(url)
if results.getsubs:
    get_subdomains(results.domain)
if results.crtsh:
    cert_search(results.domain) """

